@model OutraClinica.Models.Paciente


@{
    Layout = null;
    ViewBag.Title = "Edit";
}

<div class="modal-dialog">
    <div class="modal-content">

        @using (Html.BeginForm())
        {

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.PacienteID)

            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                <h4 class="modal-title">Editar Paciente</h4>
            </div>

            @Html.AntiForgeryToken()

            <div class="modal-body">
                <div class="form-horizontal">
                    @Html.ValidationSummary(true)
                   
                    <div class="form-group">
                        @Html.LabelFor(model => model.nome, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.nome, new { htmlAttributes = new { @class = "form-control textarea", id = "nome", @onkeyup = "ValidaNome()" } })
                            @Html.ValidationMessageFor(model => model.nome, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-lg-3"></div>
                        <div class="col-md-9" id="msgErrorNome" style="display:none; color:red; background-color:red; "></div>
                    </div>

                    
                    <div class="form-group">
                        @Html.LabelFor(model => model.telefone, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.telefone, new { htmlAttributes = new { @class = "form-control textarea", id = "telefone", @onkeyup = "ValidaTelefone()" } })
                            @Html.ValidationMessageFor(model => model.telefone, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-lg-3"></div>
                        <div class="col-md-9" id="msgErrorTelefone"></div>
                    </div>


                    
                    <div class="form-group">
                        @Html.LabelFor(model => model.DataNascimento, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.DataNascimento, new { htmlAttributes = new { @class = "form-control textarea", @readonly = "true" } })
                            @Html.ValidationMessageFor(model => model.DataNascimento, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-lg-3"></div>
                        <div class="col-md-9"></div>
                    </div>
                
                    <div class="form-group">
                        @Html.LabelFor(model => model.logradouro, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.logradouro, new { htmlAttributes = new { @class = "form-control textarea" } })
                            @Html.ValidationMessageFor(model => model.logradouro, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-lg-3"></div>
                        <div class="col-md-9"></div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.numero, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.numero, new { htmlAttributes = new { @class = "form-control textarea" } })
                            @Html.ValidationMessageFor(model => model.numero, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-lg-3"></div>
                        <div class="col-md-9"></div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.bairro, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.bairro, new { htmlAttributes = new { @class = "form-control textarea" } })
                            @Html.ValidationMessageFor(model => model.bairro, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-lg-3"></div>
                        <div class="col-md-9"></div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.estado, "estado", htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.DropDownList("estado", null, htmlAttributes: new { @class = "form-control textarea" })
                            @Html.ValidationMessageFor(model => model.estado, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-lg-3"></div>
                        <div class="col-md-9"></div>
                    </div>

                    @if (User.IsInRole("Admin"))
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.observacoes, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.observacoes, new { htmlAttributes = new { @class = "form-control textarea" } })
                                @Html.ValidationMessageFor(model => model.observacoes, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-lg-3"></div>
                            <div class="col-md-9"></div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.observacoes)
                    }

                    
                </div>
            </div>
            <div class="form-group">
                <div class="modal-footer">
                    <input type="submit" value="Salvar" class="btn btn-success" id="btnSalvar" />
                    <input type="button" value="Cancelar" class="btn btn-default" data-dismiss="modal" />
                </div>
            </div>
        }
    </div><!-- /.modal-content -->
</div><!-- /.modal-dialog -->


<script type="text/javascript">
    $("#telefone").mask("(00) 0000-00009", { placeholder: "Ex: (51) 3366-66999" });
</script>


<script>
    $(function () {
        $("#DataNascimento").datepicker({

            dayNames: ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'],
            dayNamesMin: ['D', 'S', 'T', 'Q', 'Q', 'S', 'S', 'D'],
            dayNamesShort: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb', 'Dom'],
            monthNames: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],
            monthNamesShort: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            nextText: 'Próximo',
            prevText: 'Anterior',
            dateFormat: 'dd/MM/yy',
            buttonText: "Select date",
            changeMonth: true,
            changeYear: true,
            maxDate: 0,
            yearRange: '1910:@DateTime.Now.Year'
        });
    });
</script>

<script>
    function ValidaNome() {
        var campo = document.getElementById("nome");
        var btnSalvar = document.getElementById("btnSalvar");
        var alertDiv = document.getElementById("msgErrorNome");
        console.log(campo.value.length);
        if (campo.value.length > 0 && campo.value.length < 3) {
            btnSalvar.style = "display: none;"

            alertDiv.style = "color:red;";
            alertDiv.innerHTML = "* Nome deve ter no minimo 3 caracteres!";

        } else if (campo.value.length == 0) {
            btnSalvar.style = "display: none;"

            alertDiv.style = "color:red;";
            alertDiv.innerHTML = "* Campo nome é obrigatorio";
        }
        else {
            btnSalvar.style = "";
            alertDiv.style = "display: none";
            alertDiv.value = " Nome deve ter no minimo 3 caracteres!";
        };
    }



    function ValidaTelefone() {
        var campo = document.getElementById("telefone");
        var btnSalvar = document.getElementById("btnSalvar");
        var alertDiv = document.getElementById("msgErrorTelefone");
        console.log(campo.value.length);
        if (campo.value.length > 0 && campo.value.length < 14) {
            btnSalvar.style = "display: none;"

            alertDiv.style = "color:red;";
            alertDiv.innerHTML = "Telefone Invalido!";

        } else if (campo.value.length == 0) {
            btnSalvar.style = "display: none;"

            alertDiv.style = "color:red;";
            alertDiv.innerHTML = "* Campo Telefone é obrigatorio!";
        }
        else {
            btnSalvar.style = "";
            alertDiv.style = "display: none";
            alertDiv.value = "* Campo Telefone é obrigatorio!";
        };
    }

</script>